
üîπ –ö–ª—é—á–µ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
final List<String> answers; —Å –æ–±—ã—á–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:
—Å–∞–º—É —Å—Å—ã–ª–∫—É –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–∏—Ç—å,
–Ω–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (add, remove).
final List<String> answers; —Å const —Å–ø–∏—Å–∫–æ–º:
–Ω–µ–ª—å–∑—è –Ω–∏ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–∏—Ç—å,
–Ω–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (add, remove ‚Üí ‚ùå –æ—à–∏–±–∫–∞).



1. pub.dev (–ø–∞–∫–µ—Ç—ã)
–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –ø–∞–∫–µ—Ç–æ–≤ Dart/Flutter.
–¢–∞–º –ª–µ–∂–∞—Ç —Ç–∞–∫–∏–µ –≤–µ—â–∏, –∫–∞–∫:
google_fonts (—à—Ä–∏—Ñ—Ç—ã),
http (—Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Ç—å—é),
provider (state management),
sqflite (SQLite –±–∞–∑–∞), –∏ —Ç.–¥.

flutter pub add google_fonts
–≤ –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –æ–Ω–∞ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ pubspec.yaml, 
—Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ .pub-cache, –∏ –ø–æ—Ç–æ–º —Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –µ—ë –≤ –∫–æ–¥–µ

import 'package:google_fonts/google_fonts.dart';



2. Extensions –≤ VS Code
–≠—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–∞–º–æ–π IDE (Visual Studio Code).
–û–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–µ –Ω–∞ —Ç–≤–æ–π –∫–æ–¥, –∞ –Ω–∞ —Ç–æ, –∫–∞–∫ —Ç—ã —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞–µ—à—å.
–ü—Ä–∏–º–µ—Ä—ã:
Flutter extension (–¥–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, hot reload, –æ—Ç–ª–∞–¥–∫—É).
Dart extension.
Themes, –∏–∫–æ–Ω–∫–∏, –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞.



https://www.pub.dev/packages

flutter pub add google_fonts

https://www.fonts.google.com




For- operator


Just as you can also use the if keyword inside of lists (to add elements conditionally),
 you can also use the for keyword to add multiple items into a list:

final numbers = [5, 6];
final myList = [
  1,
  2,
  for (final num in numbers)
    num
];

In this example, the numbers 5 and 6 will be added to myList (hence myList thereafter is [1, 2, 5, 6]).

This for ... in syntax is a special variation of the for loop that loops through multiple items in a list.
You will see it again later in the course - both outside and inside of a list. It will also be explained again later.
The idea behind this loop is to simplify the process of performing some operation on all items in a list.

When used in a list, it's essentially an alternative to the spread operator (...):

final numbers = [5, 6];
final myList = [
  1,
  2,
  ...numbers
];
It can be useful in scenarios where values must be transformed before being added to a list - 
the for ... in loop can then be used instead of map() + spread operator:

final numbers = [5, 6];
final myList = [
  1,
  2,
  ...numbers.map((n) {
    return n * 2; 
  }) // adds 10 and 12
];
can be replaced with:

final numbers = [5, 6];
final myList = [
  1,
  2,
  for (final num in numbers)
    num * 2 // adds 10 and 12
];
As mentioned, you will learn more about for later in the course.

You can also learn more about for ... in inside of lists here:





